<!DOCTYPE html>
<html lang="ja">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>ラーメン登録フォーム</title>
		<link rel="stylesheet" type="text/css" href="/styles/form.css" />
	</head>
	
	<body>
		<div class="header">
			<div class="headerInfo">
				<p id="titleName">My麺</p>
			</div>
		</div>
		<input type="checkbox" class="openSidebarMenu" id="openSidebarMenu" />
		<label for="openSidebarMenu" class="sidebarIconToggle">
			<div class="spinner diagonal part-1"></div>
			<div class="spinner horizontal"></div>
			<div class="spinner diagonal part-2"></div>
		</label>
		<div class="back">
		<a href="/" id="back">戻る</a>
		</div>
		<div class="form">
			<h1>ラーメン登録</h1>
			<form action="" method="post" enctype="multipart/form-data">
				<div class="head">
					<div class="item">
						<label class="label">店名</label>
						<input type="text" class="inputs" name="shopName" />
					</div>
					<div class="item">
						<p>点数：<span id="score">150</span></p>
					</div>
					<div class="item">
						<label class="label">写真</label>
						<input type="file" class="inputs" name="imageFile" accept="image/*" onchange="previewPhoto(event)"/>
						<img src="/pictures/sampleRamen.jpg" alt="選択中の写真" id="imagePreview"  height="200px" width="auto">
					</div>
				</div>
				<div class="evaluation">
					<div class="item2">
						<label class="label">麺</label>
						<div class="item2-inside">
							<div class="down" onclick="upDown(0,-1)">-</div>
							<input type="range" id="men" min="0" max="100" step="1" name="menScore" />
							<div class="up" onclick="upDown(0,1)">+</div>
						</div>
						<p><span id="current-value-men"></span></p>
					</div>
					<div class="item2">
						<label class="label">スープ</label>
						<div class="item2-inside">
							<div class="down" onclick="upDown(1,-1)">-</div>
							<input type="range" id="Soup" min="0" max="100" step="1" name="soupScore" />
							<div class="up" onclick="upDown(1,1)">+</div>
						</div>
						<p><span id="current-value-soup"></span></p>
					</div>
					<div class="item2">
						<label class="label">トッピング</label>
						<div class="item2-inside">
							<div class="down" onclick="upDown(2,-1)">-</div>
							<input
								type="range"
								id="Topping"
								min="0"
								max="100"
								step="1"
								name="toppingScore"
							/>
							<div class="up" onclick="upDown(2,1)">+</div>
						</div>
						<p><span id="current-value-topping"></span></p>
					</div>
				</div>
				<div class="item3">
					<label class="label">コメント</label>
					<textarea class="inputs" name="comment"></textarea>
				</div>
				<div class="button">
					<input id="submit" type="submit" value="登録" />
					<input id="reset" type="reset" value="リセット" />
				</div>
			</form>
		</div>
		<script>
			const inputElemMen = document.getElementById("men");
			const inputElemSoup = document.getElementById("Soup");
			const inputElemTopping = document.getElementById("Topping");
			const currentValueElemMen = document.getElementById("current-value-men");
			const currentValueElemSoup = document.getElementById("current-value-soup");
			const currentValueElemTopping = document.getElementById("current-value-topping");
			const inputElemUp= document.getElementsByClassName("up")
			
			const inputElemreset = document.getElementById("reset");

			const scoreElemen = document.getElementById("score");

			function upDown(elem,num){
				num=Number(num)
				if(elem===0 && currentValueElemMen.innerText<100 && currentValueElemMen.innerText>0){
				currentValueElemMen.innerText=String(Number(currentValueElemMen.innerText) + num);
				scoreElemen.innerText=String(Number(scoreElemen.innerText) + num);;
				inputElemMen.value=String(Number(inputElemMen.value) + num);;
				console.log("0")
				}
				else if(elem===1 && currentValueElemSoup.innerText<100 && currentValueElemSoup.innerText>0){
				currentValueElemSoup.innerText=String(Number(currentValueElemSoup.innerText) + num);
				scoreElemen.innerText=String(Number(scoreElemen.innerText) + num);;
				inputElemSoup.value=String(Number(inputElemSoup.value) + num);;
				}
				else if(elem===2 && currentValueElemTopping.innerText<100 && currentValueElemTopping.innerText>0){
				currentValueElemTopping.innerText=String(Number(currentValueElemTopping.innerText) + num);
				scoreElemen.innerText=String(Number(scoreElemen.innerText) + num);;
				inputElemTopping.value=String(Number(inputElemTopping.value) + num);;
				}
			}

			function previewPhoto(event){
				const file = event.target.files[0];
				const reader = new FileReader();
				console.log(file)
				const image = document.getElementById("imagePreview");

				reader.onload  = () =>{
					image.src = reader.result
				};

				reader.readAsDataURL(file);
			}
			

			const updateTotalScore = () => {
				const menScore = parseInt(inputElemMen.value);
				const soupScore = parseInt(inputElemSoup.value);
				const toppingScore = parseInt(inputElemTopping.value);
				const totalScore = menScore + soupScore + toppingScore;
				scoreElemen.innerText = totalScore;
			};
			//リセット
			const reset = () => {
				currentValueElemMen.innerText=50;
				currentValueElemSoup.innerText=50;
				currentValueElemTopping.innerText=50;
				scoreElemen.innerText=150;
			};
			//点数を書き入れる
			const setCurrentValue = (elem, val) => {
				elem.innerText = val;
			};
			//イベントが起きた時に
			const rangeOnChange = (e, elem) => {
				setCurrentValue(elem, e.target.value);
			};
			//ぺージのなにかがリロードされたときに
			window.onload = () => {
				//値が変更されたときに
				inputElemMen.addEventListener("input", (e) => {
					rangeOnChange(e, currentValueElemMen);
					updateTotalScore();
				});
				inputElemSoup.addEventListener("input", (e) => {
					rangeOnChange(e, currentValueElemSoup);
					updateTotalScore();
				});
				inputElemTopping.addEventListener("input", (e) => {
					rangeOnChange(e, currentValueElemTopping);
					updateTotalScore();
				});
				inputElemreset.addEventListener("click", (e) => {
					reset();
				});
				setCurrentValue(currentValueElemMen, inputElemMen.value);
				setCurrentValue(currentValueElemSoup, inputElemSoup.value);
				setCurrentValue(currentValueElemTopping, inputElemTopping.value);
			};
		</script>
	</body>
</html>
